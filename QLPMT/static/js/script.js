function addToMedicalRecord(id, name, price, quantityFieldId = null, unit, usageInstructions) {
    let quantity = 1; // M·∫∑c ƒë·ªãnh s·ªë l∆∞·ª£ng l√† 1 n·∫øu kh√¥ng c√≥ √¥ nh·∫≠p
    if (quantityFieldId) {
        let quantityInput = document.getElementById(quantityFieldId);
        quantity = quantityInput ? parseInt(quantityInput.value) : 1;
    }

    if (isNaN(quantity) || quantity <= 0) {
        alert("Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá!");
        return;
    }

    fetch('/api/medical_records', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            id: id,
            name: name,
            price: parseFloat(price),
            quantity: quantity,
            unit: unit,
            usageInstructions: usageInstructions
        })
    })
    .then(res => res.json())
    .then(data => {
        if (data.status === "error") {
            alert("L·ªói: " + data.message);
        } else {
            alert(`Thu·ªëc "${name}" (${unit}) ƒë√£ ƒë∆∞·ª£c th√™m v√†o phi·∫øu kh√°m!\nH∆∞·ªõng d·∫´n: ${usageInstructions}`);
            document.querySelectorAll(".class_counter").forEach(counter => {
                counter.innerText = data.total_quantity;
            });
        }
    })
    .catch(error => {
        console.log("L·ªói khi g·ª≠i y√™u c·∫ßu phi·∫øu kh√°m:", error);
        alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
    });
}

function updateMedicalRecord(id, obj) {
    let quantity = parseInt(obj.value);
    if (isNaN(quantity) || quantity <= 0) {
        alert("S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!");
        return;
    }

    fetch(`/api/medical_record/${id}`, {
        method: 'PUT',
        body: JSON.stringify({ "quantity": quantity }),
        headers: { "Content-Type": "application/json" }
    }).then(res => {
        if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
        return res.json();
    }).then(data => {
        if (data.status === "error") {
            alert("L·ªói c·∫≠p nh·∫≠t: " + data.message);
        } else {
            document.querySelectorAll(".class_counter").forEach(counter => {
                counter.innerText = data.total_quantity;
            });

            document.querySelectorAll(".class_amount").forEach(amount => {
                amount.innerText = data.total_amount.toLocaleString("vi-VN");
            });
        }
    }).catch(error => {
        console.log("L·ªói c·∫≠p nh·∫≠t phi·∫øu kh√°m: ", error);
        alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
    });
}

function deleteMedicalRecord(id) {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a thu·ªëc n√†y kh·ªèi phi·∫øu kh√°m?")) {
        fetch(`/api/medical_record/${id}`, { method: 'DELETE' })
        .then(res => {
            if (!res.ok) throw new Error(`HTTP error! Status: ${res.status}`);
            return res.json();
        })
        .then(data => {
            if (data.status === "error") {
                alert("L·ªói x√≥a thu·ªëc: " + data.message);
            } else {
                document.querySelectorAll(".class_counter").forEach(counter => {
                    counter.innerText = data.total_quantity;
                });

                document.querySelectorAll(".class_amount").forEach(amount => {
                    amount.innerText = data.total_amount.toLocaleString("vi-VN");
                });

                let medicineRow = document.getElementById(`medicine${id}`);
                if (medicineRow) {
                    medicineRow.remove();
                }
            }
        })
        .catch(error => {
            console.log("L·ªói x√≥a phi·∫øu kh√°m: ", error);
            alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
        });
    }
}

function storePatientInfo(id, name, appointmentDate) {
    fetch('/api/session/store_patient', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: id, name: name, appointment_date: appointmentDate })
    })
    .then(res => res.json())
    .then(data => {
        if (data.status === "success") {
            alert("L·∫≠p phi·∫øu kh√°m th√†nh c√¥ng!"); // Hi·ªÉn th·ªã th√¥ng b√°o
        } else {
            alert("C√≥ l·ªói x·∫£y ra: " + data.message);
        }
    })
    .catch(error => {
        console.log("L·ªói khi l∆∞u th√¥ng tin b·ªánh nh√¢n v√†o session:", error);
        alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
    });
}

function autoSaveMedicalRecord() {
    const symptoms = document.getElementById("symptoms").value;
    const diagnosis = document.getElementById("diagnosis").value;

    fetch('/api/save_medical_record_session', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ symptoms: symptoms, diagnosis: diagnosis })
    })
    .catch(error => console.log("L·ªói khi l∆∞u d·ªØ li·ªáu v√†o session:", error));
}

// G·∫Øn s·ª± ki·ªán t·ª± ƒë·ªông l∆∞u
document.getElementById("symptoms").addEventListener("input", autoSaveMedicalRecord);
document.getElementById("diagnosis").addEventListener("input", autoSaveMedicalRecord);

function saveMedicalRecord() {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën l∆∞u phi·∫øu kh√°m?")) {
        let totalAmount = document.querySelector(".class_amount").innerText.replace(" VNƒê", "").replace(/,/g, "").trim();

        fetch("/api/save-medical-record", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                symptoms: document.getElementById("symptoms").value.trim(),
                diagnosis: document.getElementById("diagnosis").value.trim(),
                total_amount: totalAmount  // ‚úÖ G·ª≠i t·ªïng ti·ªÅn thu·ªëc t·ª´ giao di·ªán l√™n API
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.status === "success") {
                alert("Phi·∫øu kh√°m ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
                location.reload();
            } else {
                alert(`L·ªói: ${data.message}`);
            }
        })
        .catch(error => {
            console.log("L·ªói khi l∆∞u phi·∫øu kh√°m: ", error);
            alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
        });
    }
}

function storePaymentInfo(medicalRecordId, patientName, appointmentDate, medicalFee, totalMedicineCost) {
    let totalAmount = parseFloat(medicalFee) + parseFloat(totalMedicineCost); // ‚úÖ T√≠nh t·ªïng ti·ªÅn c·∫ßn thanh to√°n

    fetch('/api/session/store_payment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            medical_record_id: medicalRecordId,
            patient_name: patientName,
            appointment_date: appointmentDate,
            medical_fee: medicalFee,
            total_medicine_cost: totalMedicineCost,
            total_amount: totalAmount
        })
    })
    .then(res => res.json())
    .then(data => {
        if (data.status === "success") {
            alert(`‚úî Th√¥ng tin thanh to√°n ƒë√£ ƒë∆∞·ª£c l∆∞u!\nT√™n: ${patientName}\nNg√†y kh√°m: ${appointmentDate}\nT·ªïng ti·ªÅn: ${totalAmount} VND`);
        } else {
            alert("C√≥ l·ªói x·∫£y ra: " + data.message);
        }
    })
    .catch(error => {
        console.log("L·ªói khi l∆∞u th√¥ng tin thanh to√°n v√†o session:", error);
        alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
    });
}

function storePaymentInfo(medicalRecordId, patientName, appointmentDate, medicalFee, totalMedicineCost) {
    let totalAmount = parseFloat(medicalFee) + parseFloat(totalMedicineCost);

    fetch('/api/session/store_payment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            medical_record_id: medicalRecordId,
            patient_name: patientName,
            appointment_date: appointmentDate,
            medical_fee: medicalFee,
            total_medicine_cost: totalMedicineCost,
            total_amount: totalAmount
        })
    })
    .then(res => res.json())
    .then(data => {
        if (data.status === "success") {
            console.log("‚úÖ ƒê√£ l∆∞u session, chuy·ªÉn h∆∞·ªõng...");
            window.location.href = `/invoice/${medicalRecordId}`;  // ‚úÖ Chuy·ªÉn h∆∞·ªõng ngay sau khi l∆∞u session
        } else {
            alert("C√≥ l·ªói x·∫£y ra: " + data.message);
        }
    })
    .catch(error => {
        console.log("L·ªói khi l∆∞u th√¥ng tin thanh to√°n v√†o session:", error);
        alert("C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
    });
}

function redirectToPayment(medicalRecordId) {
    if (confirm("üìå X√°c nh·∫≠n thanh to√°n h√≥a ƒë∆°n?")) {
        fetch('/api/process-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ medical_record_id: medicalRecordId })
        })
        .then(res => res.json())
        .then(data => {
            if (data.status === "success") {
                alert("‚úî H√≥a ƒë∆°n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o h·ªá th·ªëng!");
                window.location.href = "/today-medical-records";  // ‚úÖ Chuy·ªÉn v·ªÅ danh s√°ch phi·∫øu kh√°m
            } else {
                alert("‚ùå C√≥ l·ªói x·∫£y ra: " + data.message);
            }
        })
        .catch(error => {
            console.log("L·ªói khi x·ª≠ l√Ω thanh to√°n:", error);
            alert("‚ö† C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
        });
    }
}